There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented 
as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected 
by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

Example 1:
Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2

Example 2:
Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.

Constraints:
1 <= n <= 2 * 105
0 <= edges.length <= 2 * 105
edges[i].length == 2
0 <= ui, vi <= n - 1
ui != vi
0 <= source, destination <= n - 1
There are no duplicate edges.
There are no self edges.

Code: Java

class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> graph = new HashMap<>();

        for(int[] edge: edges){
            int v1 = edge[0], v2 = edge[1];
            graph.computeIfAbsent(v1, v -> new ArrayList<>()).add(v2);
            graph.computeIfAbsent(v2, v -> new ArrayList<>()).add(v1);
        }

        boolean[] visited = new boolean[n];
        for(boolean v: visited){
            v = false;
        }

        Queue<Integer> queue = new LinkedList<>();
        queue.add(source);

        while(!queue.isEmpty()){
            int curr = queue.remove();
            if(curr == destination) return true;

            for(var vertex: graph.get(curr)){
                if(!visited[vertex]){
                    queue.add(vertex);
                    visited[vertex] = true;
                }
            }
        }
        return false;
    }
}

Time Complexity:
Building adjacency list: O(E)
BFS traversal: O(V + E)
Total: O(V + E)

Space Compexity:
Adjacency list: O(V + E)
Visited array: O(V)
Queue (worst case all vertices): O(V)
Total: O(V + E)
