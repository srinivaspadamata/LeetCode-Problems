Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the 
grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.

Code: Java

Using DFS:

class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] vis = new boolean[m][n];
        int islands = 0;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == '1' && !vis[i][j]){
                    islands++;
                    dfs(grid, vis, i, j, m, n);
                }
            }
        }
        return islands;
    }
    
    private void dfs(char[][] grid, boolean[][] vis, int i, int j, int m, int n){
        vis[i][j] = true;
        int[][] dir = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};

        for(int k=0; k<4; k++){
            int newi = i + dir[k][0];
            int newj = j + dir[k][1];
            if(isSafe(newi, newj, m, n) && grid[newi][newj] == '1' && !vis[newi][newj]){
                dfs(grid, vis, newi, newj, m, n);
            }
        }
    }

    private boolean isSafe(int newi, int newj, int m, int n){
        return (newi >= 0 && newi < m && newj >= 0 && newj < n);
    }
}

Time Complexity: O(m × n)
m = number of rows
n = number of columns
mn = total cells in the grid

Space Complexity: O(m × n), vis[][] array → O(m × n)
