Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

Example 1:
Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.

Example 2:
Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.

Constraints:
1 <= words.length <= 500
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
k is in the range [1, The number of unique words[i]]

Follow-up: Could you solve it in O(n log(k)) time and O(n) extra space?

Code: Java

Using Min Heap

class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String, Integer> wordMap = new HashMap<>();
        for(String word: words){
            wordMap.put(word, wordMap.getOrDefault(word, 0) + 1);
        }
        PriorityQueue<Map.Entry<String, Integer>> minHeap = new PriorityQueue<>((a, b) -> a.getValue() == b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue() - b.getValue());
        for(Map.Entry<String, Integer> word: wordMap.entrySet()){
            minHeap.add(word);
            if(minHeap.size() > k){
                minHeap.poll();
            }
        }

        List<String> result  = new ArrayList<>();
        while(!minHeap.isEmpty()){
            result.add(minHeap.poll().getKey());
        }
        Collections.reverse(result);
        return result;
    }
}

Using Max Heap

import java.util.*;
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        // Step 1: Count the frequency of each word
        HashMap<String, Integer> wordMap = new HashMap<>();
        for (String word : words) {
            wordMap.put(word, wordMap.getOrDefault(word, 0) + 1);
        }

        // Step 2: Use a PriorityQueue (max-heap) to store words by frequency and lexicographical order
        PriorityQueue<Map.Entry<String, Integer>> maxHeap = 
            new PriorityQueue<>((a, b) -> a.getValue() == b.getValue() ? a.getKey().compareTo(b.getKey()) : b.getValue() - a.getValue());

        // Step 3: Add all entries from the wordMap to the heap
        maxHeap.addAll(wordMap.entrySet());

        // Step 4: Collect the top K frequent words
        List<String> result = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            result.add(maxHeap.poll().getKey());
        }
        return result;
    }
}

Time Complexity: O(n + u log u)
Space Complexity: O(u + k)
