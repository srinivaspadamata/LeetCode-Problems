You are given a string s, which contains stars *.
In one operation, you can:

Choose a star in s.
Remove the closest non-star character to its left, as well as remove the star itself.
Return the string after all stars have been removed.

Note:
The input will be generated such that the operation is always possible.
It can be shown that the resulting string will always be unique.

Example 1:
Input: s = "leet**cod*e"
Output: "lecoe"
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in "leet**cod*e". s becomes "lee*cod*e".
- The closest character to the 2nd star is 'e' in "lee*cod*e". s becomes "lecod*e".
- The closest character to the 3rd star is 'd' in "lecod*e". s becomes "lecoe".
There are no more stars, so we return "lecoe".

Example 2:
Input: s = "erase*****"
Output: ""
Explanation: The entire string is removed, so we return an empty string.
 
Constraints:
1 <= s.length <= 105
s consists of lowercase English letters and stars *.
The operation above can be performed on s.

Code: Java

class Solution {
    public String removeStars(String s) {
        Stack<Character> charStack = new Stack<>();
        StringBuilder str = new StringBuilder();

        for(char ch: s.toCharArray()){
            if(ch == '*'){
                if(!charStack.isEmpty()){
                    charStack.pop();
                }
            }
            else{
                charStack.push(ch);
            }
        }
        for(char c: charStack){
            str.append(c);
        }
        return str.toString();
    }
}

Time Complexity: O(n)
Space Complexity: O(n), In the worst case, all characters are stored in the stack

Brute Force Code:

public static String removeStars(String s) {
    StringBuilder result = new StringBuilder();

    for (char ch : s.toCharArray()) {
        if (ch == '*') {
            // Remove the last character when encountering a star
            if (result.length() > 0) {
                result.deleteCharAt(result.length() - 1);
            }
        } else {
            // Append non-star characters
            result.append(ch);
        }
    }

    return result.toString();
}

Time Complexity: O(n)
Space Complexity: O(n), better than stack version which used O(2n)
