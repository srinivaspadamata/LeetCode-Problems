Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false

Example 4:
Input: s = "([])"
Output: true

Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Code: Java
Time Complexity: O(N)
Space Complexity: O(N)

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

        for(char ch: s.toCharArray()){
            if(!stack.isEmpty() && ch == ')' && stack.peek() == '('){
                stack.pop();
            }
            else if(!stack.isEmpty() && ch == '}' && stack.peek() == '{'){
                stack.pop();
            }
            else if(!stack.isEmpty() && ch == ']' && stack.peek() == '['){
                stack.pop();
            }
            else{
                stack.add(ch);
            }
        }
        return stack.isEmpty();
    }
}

Time Complexity: O(n)
Space Complexity: O(n), In the worst case (e.g., "((((("), all characters go into the stack.
