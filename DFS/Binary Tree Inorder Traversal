Given the root of a binary tree, return the inorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]
Output: [4,2,6,5,7,1,3,9,8]

Example 3:
Input: root = []
Output: []

Example 4:
Input: root = [1]
Output: [1]

Constraints:
The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100

Follow up: Recursive solution is trivial, could you do it iteratively?

Code: Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> binaryTree = new ArrayList<>();
        inOrderTraversal(root, binaryTree);
        return binaryTree;
    }
    private void inOrderTraversal(TreeNode root, List<Integer> binaryTree){
        if(root == null) return;

        inOrderTraversal(root.left, binaryTree);
        binaryTree.add(root.val);
        inOrderTraversal(root.right, binaryTree);
    }
}

Time Complexity: O(n)
Space Complexity: O(n + h) â†’ O(n) worst case, O(n) for result list, O(h) for recursion.
