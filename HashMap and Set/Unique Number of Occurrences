Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

Example 1:
Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.

Example 2:
Input: arr = [1,2]
Output: false

Example 3:
Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

Constraints:
1 <= arr.length <= 1000
-1000 <= arr[i] <= 1000

Code: Java

class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        HashMap<Integer, Integer> countMap = new HashMap<>();
        HashSet<Integer> countSet = new HashSet<>();
        for(int i=0;i<arr.length;i++){
            countMap.put(arr[i], countMap.getOrDefault(arr[i],0)+1);
        }
        //for(var num: countMap.keySet()){
        //    countSet.add(countMap.get(num));
        //}
        //if(countSet.size() != countMap.size()){
        //    return false;
        //}
        for (int freq : countMap.values()) {
            // If frequency already exists, return false
            if (!countSet.add(freq)) {
                return false;
            }
        }
        return true;
    }
}

Time Complexity: O(n)
Space Complexity: O(n)
