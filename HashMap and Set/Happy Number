Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

Example 1:
Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
Output: false

Constraints:
1 <= n <= 231 - 1

Code: Java

Time Complexity: O(LogN) -> When squaring digits, the sum typically results in a smaller number.
Space Complexity: O(LogN) -> HashSet

class Solution {
    public boolean isHappy(int n) {
        HashSet<Integer> set = new HashSet<>(); //If we see a repeated number, itâ€™s a cycle (return false).
        while(n != 1 && !set.contains(n)){
            set.add(n);
            n = sumOfSquares(n);
        }
        return n == 1;
    }
    private int sumOfSquares(int num){
        int sum = 0;
        while(num > 0){
            int digit = num % 10;
            sum = sum + digit*digit;
            num = num / 10;
        }
        return sum;
    }
}

Optimized for Space:
Time Complexity: O(LogN) -> When squaring digits, the sum typically results in a smaller number.
Space Complexity: O(1) --> not used any data structure;
If slow and fast meet, it is a cycle

class Solution {
    public boolean isHappy(int n) {
        int slow = n, fast = n;
        do{
            slow = sumOfSquares(slow);
            fast = sumOfSquares(sumOfSquares(fast));
        }while(slow != fast);

        return slow == 1;
    }
    private int sumOfSquares(int num){
        int sum = 0;
        while(num > 0){
            int digit = num % 10;
            sum = sum + digit*digit;
            num = num / 10;
        }
        return sum;
    }
}

