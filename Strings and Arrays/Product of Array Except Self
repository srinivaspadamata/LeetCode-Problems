Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 
Constraints:
2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.

Code: Java using DP

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] temp = new int[nums.length];
		int prefix = 1;
        for(int i=0;i<nums.length;i++){
            temp[i] =  prefix;
            prefix *= nums[i];
        }

        int suffix = 1;
        for(int i=nums.length-1;i>=0;i--){
            temp[i] *= suffix;
            suffix *= nums[i];
        }
        return temp;
    }
}

Time Complexity = O(n)
Space Complexity = O(n) including output, O(1) auxiliary.

Brute Force:

import java.util.Arrays;
public class ProductExceptSelfBruteForce {
    public static int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];

        // Calculate product except self for each element
        for (int i = 0; i < n; i++) {
            int product = 1;
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    product *= nums[j];
                }
            }
            result[i] = product;
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4};
        System.out.println(Arrays.toString(productExceptSelf(nums)));
    }
}

Time Complexity = O(nÂ²)
Space Complexity = O(n), due to result[] array

