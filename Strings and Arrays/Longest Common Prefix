Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".

Example 1:
Input: strs = ["flower","flow","flight"]
Output: "fl"

Example 2:
Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.

Constraints:
1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters if it is non-empty.

Code: Java

Brute Force O(N*M): N is the number of strings, M is the length of the shortest string

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs.length == 0 || strs == null) return "";

        String first = strs[0];
        for(int i=0;i<first.length();i++){
            char ch = first.charAt(i);
            for(int j=1;j<strs.length;j++){
                if(i >= strs[j].length() || ch != strs[j].charAt(i)){
                    return first.substring(0, i);
                }
            }
        }
        return first;
    }
}

Time Complexity: O(n * k)
Space Complexity: O(1)

Optimized Technique O(N logN + M): N logN for sorting, M is the length of the shortest string

If a character at position i matches in both the first and last strings, 
it means that all the strings in between must also have that character at position i.

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if(strs.length == 0 || strs == null) return "";
        Arrays.sort(strs);
        String first = strs[0];
        String last = strs[strs.length - 1]; 
        int i = 0;
        while(i < first.length() && i < last.length() && first.charAt(i) == last.charAt(i)){
            i++;
        }
        return first.substring(0, i);
    }
}

Time Complexity: O(n log n * k)
Space Complexity: O(n)
