Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Constraints:
n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

Follow-up: Could you solve the problem in linear time and in O(1) space?

Code: Java

Optimized Code (Boyer-Moore Voting Algorithm):

class Solution {
    public int majorityElement(int[] nums) {
        int candidate = nums[0], count = 0;
        
        for(int num: nums){
            if(count == 0){
                candidate =  num;
            }
            count += (num == candidate) ? 1 : -1;
        }
        return candidate;
    }
}

Time Complexity = O(n) average case
Space Complexity = O(1)

Using HashMap:

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> numMap = new HashMap<>();

        for(int num: nums){
            numMap.put(num, numMap.getOrDefault(num, 0) + 1);
            if(numMap.get(num) > (nums.length / 2)){
                return num;
            }
        }
        return -1;
    }
}

Time Complexity = O(n) average case
Space Complexity = O(k) ≤ O(n)

