Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.
 

Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.
 

Constraints:

1 <= s.length <= 104
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.

Code: Java

class Solution {
    public String reverseWords(String s) {
        String[] words =  s.trim().split("\\s+");
	    StringBuilder result = new StringBuilder();
	    for(int i=words.length-1;i>=0;i--){
	        result.append(words[i]).append(" ");
	    }
	    return result.toString().trim();
    }
}

Time Complexity:
Splitting: O(n)
Reversing & appending: O(n)
Final trim: O(n)
✅ Total Time: O(n) (linear in string length)

Space Complexity
Array from split → O(n)
StringBuilder → O(n)
Output string → O(n)
✅ Total Space: O(n) (extra space proportional to the input size)
