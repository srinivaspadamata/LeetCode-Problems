Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"

Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.

Code: Java

class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        String longest = "";

        for(int i=0;i<n;i++){
            String odd = longPalindrome(s, i, i);
            String even = longPalindrome(s, i, i+1);
            
            if(odd.length() > longest.length()) longest = odd;
            if(even.length() > longest.length()) longest = even;
        }
        return longest;
    }
    private String longPalindrome(String str, int left, int right){
        while(left >= 0 && right < str.length() && str.charAt(left) == str.charAt(right)){
            left--;
            right++;
        }
        return str.substring(left + 1, right);
    }
}

Time Complexity: O(nÂ²)
Space Complexity: O(1) auxiliary + O(n) output
